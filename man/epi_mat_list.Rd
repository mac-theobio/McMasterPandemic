% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flexstruc.R
\name{epi_mat_list}
\alias{epi_mat_list}
\title{Epidemiological Matrix List}
\usage{
epi_mat_list(...)
}
\arguments{
\item{...}{named arguments giving numeric or character vectors (with names)
or matrices (with dimnames) to be included in an epidemiological model,
or named lists of such vectors or matrices. see \code{\link{epi_mat_names}}
for utilities that can help with making consistent naming choices.}
}
\value{
An object of class \code{"EpiMatrixList"}, which can be used to
simplify the construction of a \code{\link{flexmodel}}
}
\description{
Create a list of matrices to be used as variables in an
epidemiological model. This is currently an experimental
feature that is planned to superseed \code{\link{struc}}.
For more information on how the matrices are stored see
\code{\link{EpiMatrix-class}}.
}
\details{
The main benefit of this method of storing lists of matrices,
is that the user specifies a list of consistently named
numeric vectors and/or matrices that can be manipulated
symbolically. For example, here we supply the numeric inputs
required to compute the force of infection for a simple model
that includes symptomatic status.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{model_vars = epi_mat_list(
  beta = c(mild = 0.2, severe = 0.5),
  I = c(mild = 50, severe = 2),
  N = 1000
)
}\if{html}{\out{</div>}}

We can add symbolically derived matrices to this list, without
having to create an intermediate \code{\link{struc}} object. We
do this by using the \code{\link{derive}} function.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{model_vars = derive(model_vars, foi ~ sum(beta * I) * inverse(N))
model_vars$foi
#>     foi                                                                      
#> foi "(beta_mild) * (I_mild) * (1 / N) + (beta_severe) * (I_severe) * (1 / N)"
}\if{html}{\out{</div>}}

This symbolic expression for the force of infection is written in
terms of the elements of the numeric input matrices and vectors.
We can print out these names using the \code{\link[=dims]{names}}
function.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{names(model_vars$beta)
#> [1] "beta_mild"   "beta_severe"
names(model_vars$I)
#> [1] "I_mild"   "I_severe"
names(model_vars$N)
#> [1] "N"
}\if{html}{\out{</div>}}

But the \code{epi_mat_list} machinery hides all of these details
involved with element names from the user, unless they want to see them.
All the user needs to consider are matrix algebraic operations on the
objects in the \code{epi_mat_list}.

The price for having these details hidden is to construct consistently
named objects. If we alter the above example so that the names of
the severity classes do not line up, then we will get an error.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{model_vars = epi_mat_list(
  beta = c(mild = 0.2, severe = 0.5),
  I = c(bad = 50, name = 2),
  N = 1000
)
try(derive(model_vars, foi ~ sum(beta * I) * inverse(N))$foi)
#> Error in get_elementwise_dimnames(e1, e2) : 
#>   if dimnames are different, one operand needs to be 1-by-1
}\if{html}{\out{</div>}}

See \code{\link{epi_mat_names}} for utilities that can help with
making consistent naming choices.
}
