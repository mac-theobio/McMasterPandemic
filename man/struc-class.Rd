% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flexstruc.R
\docType{class}
\name{struc-class}
\alias{struc-class}
\alias{struc_dimnames-class}
\title{Class to Represent Scalar, Vector, or Matrix Structure}
\arguments{
\item{e1}{first argument of a binary operator}

\item{e2}{second argument of a binary operator}

\item{x}{\code{struc} object as an argument}

\item{y}{argument in a method}

\item{X}{argument in a method}

\item{Y}{argument in a method}

\item{...}{arguments to pass on to other methods}

\item{na.rm}{should missing values be removed?}

\item{dims}{object dimensions}
}
\description{
Objects of class \code{\link{struc}} are matrices that can be used in
symbolic mathematical expressions for defining various
characteristics of compartmental models. Several mathematical operations
exist for \code{\link{struc}} objects, including
\link[=elementwise]{elementwise sums and products},
\link[=matmult]{matrix multiplication},
\link[=sumprod]{total sums and products},
\link[=rowcolsums]{marginal row and columns sums},
\link[=row_col_mult]{multiplication of matrices by rows and columns},
\link[=symbtrans]{matrix transpose},
and blockwise matrix construction functions (
\code{\link{struc_block}},
\code{\link{struc_stretch}},
\code{\link{struc_bdiag}}
).
}
\details{
Symbolic expressions can be useful for computing complex rates
of transition between compartments. For example, the force of
infection in models with infectious classes with different severity
levels often requires taking a weighted sum of infectious classes,
where the weights are stored in a parameter vector.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{severity = c("mild", "severe")
I = struc("I" \%_\% severity)
w = struc("w" \%_\% severity)
}\if{html}{\out{</div>}}

Here the \code{\link{struc}} function was used to construct symbolic
math objects, \code{I} and \code{w}, from simple character string
vectors. The \code{\link{\%_\%}} operator \code{\link{paste}}s character
objects together with an underscore delimiter.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{"I" \%_\% severity
#> [1] "I_mild"   "I_severe"
}\if{html}{\out{</div>}}

With these \code{I} and \code{w} objects we can programmatically
get an expression for the weighted sum.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{sum(w * I)
#> struc object with 1 row and 1 column:
#> 
#> (w_mild) * (I_mild) +
#>  (w_severe) * (I_severe)
}\if{html}{\out{</div>}}

This expression could then be used to defines model variables and
state transition rates.

Once a \code{struc} object is created it can be given
\code{dimnames} by ... and creating a \code{struc_dimnames} object.
This \code{struc_dimnames} class extends struc by adding names
to the rows and columns of the \code{struc} object. For objects
with only a single row or single column, it is not necessary to
specify names for rows or columns respectively.

Continuing the example, we add row names to the column vectors
above and take their weighted sum to get the same answer as before.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{rownames(w) = rownames(I) = severity
sum(w * I)
#> struc object with 1 row and 1 column:
#> 
#> (w_mild) * (I_mild) +
#>  (w_severe) * (I_severe)
}\if{html}{\out{</div>}}

But if we set incompatible row names we get the following error

\if{html}{\out{<div class="sourceCode r">}}\preformatted{rownames(I) = c("wrong", "names")
try(sum(w * I))
#> Error in get_elementwise_dimnames(e1, e2) : 
#>   if dimnames are different, one operand needs to be 1-by-1
}\if{html}{\out{</div>}}

In this way, the \code{struc_dimnames} class allows for stronger tests of
dimensional compatibility of matrices used in symbolic computations.
These tests require that the names of dimensions are also compatible,
in addition to the numbers of rows and columns. These stronger
tests can be useful for making it more likely that symbolic matrix
operations are substantively meaningful, as opposed to just
computationally possible. For example, consider a matrix with
rows representing different levels of symptom severity, and another
with columns representing different levels of vaccination. If the
number of severity levels equals the number of vaccination levels,
it will be possible to multiply these two matrices. But this
multiplication is unlikely to be meaningful, and if the two matrices
are stored as \code{struc_dimnames} objects with descriptive dimnames
it will correctly not be possible to multiply them together.
}
\section{Slots}{

\describe{
\item{\code{v}}{character vector giving the expressions for each element
of the matrix structure object}

\item{\code{dims}}{numeric vector giving the dimensions of the matrix
structure object}
}}

\note{
Methods that involve objects of class \code{struc_expanded}
in their signature are not intended for users.
}
\section{Lifecycle}{
The \code{\link{EpiMatrix-class}} is intended to superseed the
\code{struc} class. Currently however, the \code{struc} class is
the main way to manage model structure.
}

\concept{symbolic}
